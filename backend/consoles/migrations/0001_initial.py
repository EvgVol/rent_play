# Generated by Django 4.1.7 on 2023-03-28 09:14

import colorfield.fields
import core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ограничение 50 символов!', max_length=50, unique=True, verbose_name='Наименовение')),
                ('color', colorfield.fields.ColorField(default='#FF0000', error_messages={'unique': 'Такой цвет уже существует!'}, help_text='Для выбора цвета воспользуйтесь цветовой панелью.', image_field=None, max_length=7, samples=None, unique=True, validators=[django.core.validators.RegexValidator(message='Введенное значение не является цветом в формате HEX', regex='^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')], verbose_name='Цветовой HEX-код')),
                ('slug', models.SlugField(unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')], verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'abstract': False,
                'default_related_name': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Console',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Наименовение')),
                ('image', models.ImageField(upload_to=core.models.get_upload_path, verbose_name='Изображение')),
                ('description', models.TextField(verbose_name='Описание')),
                ('barcode', models.TextField(verbose_name='Штрих-код')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата размещения')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Арендодатель')),
                ('categories', models.ManyToManyField(to='consoles.category', verbose_name='Категории')),
            ],
            options={
                'verbose_name': 'Игровая приставка',
                'verbose_name_plural': 'Игровые приставки',
                'ordering': ('-pub_date',),
                'abstract': False,
                'default_related_name': 'console',
            },
        ),
        migrations.CreateModel(
            name='ShoppingCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('console', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consoles.console', verbose_name='Игровая приставка')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Бронь',
                'verbose_name_plural': 'Бронь',
                'abstract': False,
                'default_related_name': 'shopping_list',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=256, verbose_name='Текст отзыва')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации отзыва')),
                ('score', models.PositiveSmallIntegerField(db_index=True, default=1, error_messages={'validators': 'Оценка от 1 до 10!'}, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('console', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consoles.console', verbose_name='Игровая приставка')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ('-pub_date',),
                'abstract': False,
                'default_related_name': 'reviews_console',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('console', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consoles.console', verbose_name='Игровая приставка')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранная консоль',
                'verbose_name_plural': 'Избранные консоли',
                'abstract': False,
                'default_related_name': 'favorites',
            },
        ),
        migrations.AddConstraint(
            model_name='shoppingcart',
            constraint=models.UniqueConstraint(fields=('user', 'console'), name='unique_shopping'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('console', 'author'), name='unique_review_console'),
        ),
        migrations.AddConstraint(
            model_name='favorite',
            constraint=models.UniqueConstraint(fields=('user', 'console'), name='unique_user_console'),
        ),
        migrations.AddConstraint(
            model_name='console',
            constraint=models.UniqueConstraint(fields=('name', 'barcode'), name='unique_name_console'),
        ),
    ]
